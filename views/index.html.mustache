<!DOCTYPE html>
<html>
    <body>
        <button id="register" >
            Register
        </button>

        <button id="authenticate" >
            Authenticate
        </button>
    </body>

    <script>
        var ajax = function(method, path, body, cback) {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.onreadystatechange = function() {
                if (xmlHttp.readyState === XMLHttpRequest.DONE) {
                    cback(null, JSON.parse(xmlHttp.responseText));
                }
            };

            xmlHttp.open(method, path);
            xmlHttp.setRequestHeader(
                "Content-Type", "application/json;charset=UTF-8");
            xmlHttp.send(JSON.stringify(body));
        };

        var arrayBufferToBase64 = function(buffer) {
            var binary = "";
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;

            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }

            return window.btoa(binary);
        }

        var charByChar = function(c) {
            return c.charCodeAt(0);
        };

        var publicKeyCredentialCreationOptions = {
            challenge: Uint8Array.from("{{ challenge }}", charByChar),
            rp: {
                name: "WebAuthn Server",
                id: "localhost",
            },
            user: {
                id: Uint8Array.from("{{ userId }}", charByChar),
                name: "{{ userId }}",
                displayName: "{{ userId }}",
            },
            pubKeyCredParams: [{alg: -7, type: "public-key"}],
            attestation: "none",
            userVerification: "discouraged",
        };

        var registerBtn = document.getElementById("register");

        registerBtn.addEventListener("click", function() {
            navigator.credentials.create({
                publicKey: publicKeyCredentialCreationOptions,
            }).then(function(credential) {
                const stringifiableCredential = {
                    id: credential.id,
                    rawId: arrayBufferToBase64(credential.rawId),
                    type: credential.type,
                    response: {
                        attestationObject: arrayBufferToBase64(
                            credential.response.attestationObject),
                        clientDataJSON: arrayBufferToBase64(
                            credential.response.clientDataJSON),
                    },
                };

                ajax("POST", "register", stringifiableCredential,
                    function(err, res) {
                        console.log(res);

                        if (err) {
                            alert(err);
                        } else if (res) {
                            alert("Registration successful!");
                            location.reload();
                        } else {
                            alert("Registration unsuccessful");
                        }
                    });
            });
        });

        var publicKeyCredentialRequestOptions = {
            challenge: Uint8Array.from("{{ challenge }}", charByChar),
            userVerification: "discouraged",
            rpId: "localhost",
            allowCredentials: [{
                id: Uint8Array.from("{{ credentialId }}", charByChar),
                type: "public-key",
                transports: ["usb"],
            }],
        };

        var authenticateBtn = document.getElementById("authenticate");

        authenticateBtn.addEventListener("click", function() {
            navigator.credentials.get({
                publicKey: publicKeyCredentialRequestOptions,
            }).then(function(attestation) {
                console.log(attestation);
            });
        });
    </script>
</html>

